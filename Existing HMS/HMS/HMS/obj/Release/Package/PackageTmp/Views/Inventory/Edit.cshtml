@model HMS.Models.InventoryVm

@{
    ViewBag.Title = "Edit";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
@section styleSheets{
    <link href="~/assets/plugins/EasyAutocomplete/easy-autocomplete.css" rel="stylesheet" />
    <link href="~/assets/plugins/EasyAutocomplete/easy-autocomplete.themes.css" rel="stylesheet" />
}

<div class="row">
    <div class="col-lg-8 offset-lg-2">
        <h4 class="page-title">Edit Item</h4>
    </div>
</div>

@using (Html.BeginForm())
{
    @Html.HiddenFor(model=> model.ID)
    @Html.HiddenFor(model => model.StaffID, new { @id = "staffID" })
    <div class="row">
        <div class="col-lg-8 offset-lg-2">
            <div class="card">
                <div class="card-body">
                    <div class="row">
                        <div class="col-sm-6">
                            <div class="form-group">
                                <label>Category<span class="text-danger">*</span></label>
                                @Html.DropDownListFor(x => Model.CategoryID, new SelectList(Model.CategoryList, "Value", "Text"), htmlAttributes: new { @class = "form-control", id = "StateID" })
                                @Html.ValidationMessageFor(model => model.CategoryID, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="col-sm-6">
                            <div class="form-group">
                                <label>Item Name<span class="text-danger">*</span></label>
                                @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="col-sm-6">
                            <div class="form-group">
                                <label>Quantity<span class="text-danger">*</span></label>
                                @Html.EditorFor(model => model.Quantity, new { htmlAttributes = new { @class = "form-control", @min = "0" } })
                                @Html.ValidationMessageFor(model => model.Quantity, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="col-sm-6">
                            <div class="form-group">
                                <label>Price<span class="text-danger">*</span></label>
                                @Html.EditorFor(model => model.Price, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.Price, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="col-sm-6">
                            <div class="form-group">
                                <label>Staff Name<span class="text-danger">*</span></label>

                                @Html.Editor("staffName", "staffName", new { htmlAttributes = new { @class = "form-control", @id = "staffName" } })

                            </div>
                        </div>
                        <div class="col-sm-6">
                            <div class="form-group">
                                <label>Type of Item</label>
                                @Html.DropDownListFor(x => Model.Option, new List<SelectListItem> { new SelectListItem() { Text = "--Select--", Value = "" },
                                                                                                            new SelectListItem() { Text = "Inventory", Value = "Inventory" },
                                                                                                            new SelectListItem() { Text = "Expense", Value = "Expense" },}, htmlAttributes: new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.Option, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="col-sm-12">
                            <div class="form-group">
                                <label>Description</label>
                                @Html.TextAreaFor(model => model.Description, new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="col-sm-6">
                            <input type="submit" value="Edit Item" class="btn btn-info" />
                        </div>
                        <div class="col-sm-6">
                        </div>

                        <div class="col-sm-6" style="margin-top:20px;">
                            <div class="form-group">
                                @Html.ActionLink("Back to List", "Index", null, new { @style = "font-size:12px;" })
                            </div>
                        </div>
                    </div>

                </div>
            </div>
        </div>
    </div>
}

<script src="~/assets/js/jquery-3.2.1.min.js"></script>
<script src="~/assets/plugins/SweetAlert/sweetalert2@10.js"></script>
<script src="~/assets/plugins/EasyAutocomplete/jquery.easy-autocomplete.js"></script>
<script type="text/javascript">
    $(function () {
     
        $(document).on("submit", "form", function (event) {

            
            console.log("gg")
            var formValues = $(this).serialize();
            url = "/Inventory/Edit";
            console.log(url)
            var formPost = $.post(url, formValues);
            formPost.done(function (data) {
                if (data == '1') {
                    Swal.fire({
                        icon: 'success',
                        title: 'Saved',
                        text: 'Item Saved'
                    }).then((result) => {
                        /* Read more about isConfirmed, isDenied below */
                        if (result.value==true) {
                            $("input#Name").val('');
                            $("input#Price").val('');
                            $("textarea#Description").val('');
                            $("input#Name").focus();
                        }
                    });
                }
                else if (data == '0') {
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: 'An error occurred'
                    });
                }
            });
        });
    });
     var staffOptions = {
            url: function (staffName) {
                var ajaxURL = '@Url.Action("GetStaffACData", "StaffSalaries")' + '?staffName=' + staffName;
                return ajaxURL;
            },
            getValue: "Name",
            template: {
                type: "description",
                fields: {
                    description: "ID"
                }
            },

            list: {
                onSelectItemEvent: function () {
                    var value = $("#staffName").getSelectedItemData().ID;
                    $("#staffName").attr("dataStaId", value);

                    $.ajax({
                        method: "GET",
                        url: '@Url.Action("GetStaffData", "StaffSalaries")',
                        data: { ID: value },
                        error: function () {
                            $("#PatientID").val('');
                            $("#Gender").val('');
                            $("#ContactNumber").val('');
                            $("#Address").val('');
                        },
                        beforeSend: function () {
                            //$("#OrderOverlay").show()
                        },
                        success: function (response) {
                            $("#staffID").val(response.ID);
                            $("#Amount").val(response.Charges);

                        },
                        complete: function () { $("#OrderOverlay").hide(); }
                    });
                },
                onShowListEvent: function () {
                    $("#staffName").attr("dataStaId", "");
                }
            }
        };
        $("#staffName").easyAutocomplete(staffOptions);

</script>