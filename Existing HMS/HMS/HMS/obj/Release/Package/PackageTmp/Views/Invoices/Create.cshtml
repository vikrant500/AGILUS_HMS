@model HMS.Models.InvoiceVm
@{
    ViewBag.Title = "Create";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
@section styleSheets{
    <link href="~/assets/plugins/EasyAutocomplete/easy-autocomplete.css" rel="stylesheet" />
    <link href="~/assets/plugins/EasyAutocomplete/easy-autocomplete.themes.css" rel="stylesheet" />
}
@using (Html.BeginForm())
{
    @Html.HiddenFor(model => model.DoctorID, new { @id = "DoctorId" })
    @Html.HiddenFor(model => model.DepartmentID, new { @id = "DepartmentId" })
    <div class="row">
        <div class="col-lg-8 offset-lg-2">
            <h4 class="page-title">Create Invoice</h4>
        </div>
    </div>
    <div class="row">
        <div class="col-lg-8 offset-lg-2">
            <div class="card">
                <div class="card-body">
                    <div class="row">

                        <div class="col-sm-8">
                            <div class="form-group">
                                <label>Patient Name<span class="text-danger">*</span></label>
                                @Html.Editor("PatientName", "", new { htmlAttributes = new { @class = "form-control", @dataPatId = "", @style = "width:100% !important" } })
                            </div>
                        </div>
                        <div class="col-sm-4">
                            &nbsp;
                        </div>

                        <div class="col-sm-4">
                            <div class="form-group">
                                <label>UHID<span class="text-danger">*</span></label>
                                @Html.EditorFor(model => model.PatientID, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly", @placeholder = "" } })
                            </div>
                        </div>
                        <div class="col-sm-4">
                            <div class="form-group">
                                <label>Gender</label>
                                @Html.Editor("Gender", "", new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                            </div>
                        </div>
                        <div class="col-sm-4">
                            <div class="form-group">
                                <label>Contact Number</label>
                                @Html.Editor("ContactNumber", "", new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                            </div>
                        </div>
                        <div class="col-sm-8">
                            <div class="form-group">
                                <label>Address</label>
                                @Html.Editor("Address", "", new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                            </div>
                        </div>

                        <div class="col-sm-4">
                            <div class="form-group">
                                <label>Billing Name</label>
                                @Html.Editor("FullName", "", new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                            </div>
                        </div>

                        <div class="col-sm-4">
                            <div class="form-group">
                                <label>Presc. Doctor<span class="text-danger">*</span></label>
                                @Html.EditorFor(x => Model.PresDoctor, new { htmlAttributes = new { @class = "form-control", @id = "Doctor" } })
                                @Html.ValidationMessageFor(model => model.PresDoctor, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="col-sm-4">
                            <div class="form-group">
                                <label>Department<span class="text-danger">*</span></label>
                                @Html.EditorFor(x => Model.Department, new { htmlAttributes = new { @class = "form-control", @id = "Department" } })
                                @Html.ValidationMessageFor(model => model.PresDoctor, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="col-sm-4">
                            <div class="form-group">
                                <label>Patient Reference<span class="text-danger">*</span></label>
                                @Html.DropDownListFor(x => Model.RefBy, new SelectList(Model.ReferalsList, "Value", "Text"), htmlAttributes: new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.RefBy, "", new { @class = "text-danger" })

                            </div>
                        </div>

                        <div class="col-sm-12">
                            <div class="form-group">
                                <label>Description</label>
                                @Html.TextAreaFor(model => model.Description, new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="col-sm-4">
                            <div class="form-group">
                                <label>Select Procedure</label>
                                @Html.Editor("ProcName", "", new { htmlAttributes = new { @class = "form-control" } })
                            </div>
                        </div>
                        <div class="col-sm-4">
                            <div class="form-group">
                                <label>No. of Units</label>
                                @Html.Editor("Units", "", new { htmlAttributes = new { @class = "form-control" } })
                            </div>
                        </div>

                        <div class="col-sm-4">
                            <div class="form-group">
                                <label>&nbsp;</label>
                                <input id="btnAddProcedure" type="button" value="+Add Procedure" class="btn btn-info form-control" />
                            </div>
                        </div>
                        <div class="col-sm-12">
                            <div class="form-group">
                                <table class="table table-border table-striped custom-table mb-0 patientsTable">
                                    <thead>
                                        <tr>
                                            <th>Particulars</th>
                                            <th>Rate</th>
                                            <th>Unit(s)</th>
                                            <th>Total</th>

                                            <th>Net Amt.</th>
                                            <th></th>
                                        </tr>
                                    </thead>
                                    <tbody id="procTable">
                                    </tbody>
                                </table>

                            </div>
                        </div>

                        <div class="col-sm-4">

                        </div><div class="col-sm-4">

                        </div>
                        <div class="row">
                            <div class="col-sm-3">
                                <div class="form-group">
                                    <label>Total Amount</label>
                                    @Html.Editor("total amount", new { htmlAttributes = new { @class = "form-control", @readonly = "readonly", @placeholder = 0, @id = "bottom_TotalAmount" } })

                                </div>
                            </div>
                            <div class="col-sm-3">
                                <div class="form-group">
                                    <label>Discount Amount</label>
                                    @Html.EditorFor(model => model.DiscountAmount, "", new { htmlAttributes = new { @class = "form-control", @max = 0, @oninput = "javascript: change()" } })
                                </div>
                            </div>
                            <div class="col-sm-3">
                                <div class="form-group">
                                    <label>Discount Percentage</label>
                                    @Html.EditorFor(model => model.DiscountPercentage, "", new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                                </div>
                            </div>
                            <div class="col-sm-3">
                                <div class="form-group">
                                    <label>Net Total</label>
                                    @Html.Editor("Total_Billed_Amount", "", new { htmlAttributes = new { @type = "number", @step = "0.01", @class = "form-control", @placeholder = 0, @readonly = "readonly" } })
                                </div>
                            </div>

                        </div>
                        <div class="col-sm-6">
                            <input type="submit" value="Create Invoice" class="btn btn-info" />
                        </div>
                        <div class="col-sm-6">
                        </div>

                        <div class="col-sm-6" style="margin-top:20px;">
                            <div class="form-group">
                                @Html.ActionLink("Back to List", "Index", null, new { @style = "font-size:12px;" })
                            </div>
                        </div>
                    </div>

                </div>
            </div>
        </div>
    </div>
}



<script src="~/assets/js/jquery-3.2.1.min.js"></script>
<script src="~/assets/plugins/SweetAlert/sweetalert2@10.js"></script>
<script src="~/assets/plugins/EasyAutocomplete/jquery.easy-autocomplete.js"></script>

<script type="text/javascript">

    $(function () {
        var procOptions = {
            url: function (procedureName) {
                var ajaxURL = '@Url.Action("GetProceduresData","Invoices")' + '?procedureName='+procedureName;
                return ajaxURL;
            },
            getValue: "Name",
            template: {
                type: "description",
                fields: {
                    description: "Price"
                }
            },

            list: {
                onSelectItemEvent: function () {
                    var value = $("#ProcName").getSelectedItemData().ID;
                    $("#ProcName").attr("data-procId", value);
                },
                onShowListEvent: function () {
                    $("#ProcName").attr("data-procId", "");
                }
            }
        };
        $("#ProcName").easyAutocomplete(procOptions);

        var patientOptions = {
            url: function (patientName) {
                var ajaxURL = '@Url.Action("GetPatientACCData", "Invoices")' + '?patientName=' + patientName;
                return ajaxURL;
            },
            getValue: "Name",
            template: {
                type: "description",
                fields: {
                    description: "ID"
                }
            },

            list: {
                onSelectItemEvent: function () {
                    //console.log($("#PatientName").getSelectedItemData())
                    var value = $("#PatientName").getSelectedItemData().ID;
                    $("#PatientName").attr("dataPatId", value);

                    $.ajax({
                        method: "GET",
                        url: '@Url.Action("GetPatientData", "Invoices")',
                        data: { ID: value },
                        error: function () {
                            $("#PatientID").val('');
                            $("#Gender").val('');
                            $("#ContactNumber").val('');
                            $("#Address").val('');
                        },
                        beforeSend: function () {
                            //$("#OrderOverlay").show()
                        },
                        success: function (response) {
                            $("#PatientID").val(response.ID);
                            $("#Gender").val(response.Gender);
                            $("#ContactNumber").val(response.ContactNumber);
                            $("#Address").val(response.Address);
                            $("#FullName").val(response.FirstName+' '+response.LastName)

                        },
                        complete: function () { $("#OrderOverlay").hide(); }
                    });
                },
                onShowListEvent: function () {
                    $("#PatientName").attr("dataPatId", "");
                }
            }
        };
        $("#PatientName").easyAutocomplete(patientOptions);
         var docOptions = {
            url: function (doctorName) {
                var ajaxURL = '@Url.Action("GetDoctorsData","InvoiceReports")' + '?doctorName=' + doctorName;
                return ajaxURL;
            },
            getValue: "Name",
            template: {
                type: "description",
                fields: {
                    description: "ID"
                }
            },

            list: {
                 onSelectItemEvent: function () {
                    //console.log($("#Doctor").getSelectedItemData())
                    var value = $("#Doctor").getSelectedItemData().ID;
                    $("#Doctor").attr("dataPatId", value);

                    $.ajax({
                        method: "GET",
                        url: '@Url.Action("GetDoctorIdData", "Invoices")',
                        data: { ID: value },
                        error: function () {
                            $("#Doctor").val('');
                            $("#DoctorId").val('');

                        },
                        beforeSend: function () {
                            //$("#OrderOverlay").show()
                        },
                        success: function (response) {
                            $("#Doctor").val(response.FirstName);
                            $("#DoctorId").val(response.ID);


                        },
                        complete: function () { $("#OrderOverlay").hide(); }
                    });
                },
                onShowListEvent: function () {
                    $("#Doctor").attr("data-procId", "");
                }
            }
        };
        $("#Doctor").easyAutocomplete(docOptions);

        var deptOptions = {
             url: function (departmentName) {
                 var ajaxURL = '@Url.Action("GetDepartmentsData","InvoiceReports")' + '?departmentName=' + departmentName;
                return ajaxURL;
            },
            getValue: "Name",
            template: {
                type: "description",
                fields: {
                    description: "ID"
                }
            },

            list: {
                onSelectItemEvent: function () {
                    var value = $("#Department").getSelectedItemData().ID;

                    $("#Department").attr("data-procId", value);
                    $("#DepartmentId").val(value);
                },
                onShowListEvent: function () {
                    $("#Department").attr("data-procId", "");
                }
            }
        };
        $("#Department").easyAutocomplete(deptOptions);



        $("#btnAddProcedure").on("click",function () {
            $.ajax({
                method: "GET",
                url: '@Url.Action("AddProcedure", "Invoices")',
                data: {
                    _ProcID: $("#ProcName").attr("data-procId"), _Units: $("#Units").val(), _Discount: 0 },
                contentType: "html",
                error: function () {
                    //$("#CityID").empty();
                },
                beforeSend: function () {
                    //$("#OrderOverlay").show()
                },
                success: function (response) {
                    $("#procTable").empty();
                    $("#procTable").html(response);
                },
                complete: function () {
                    $("#ProcName").val(''), $("#Units").val(''), $("#Discount").val('')
                    bind()
                }
            })
        });

        $(document).on("click", "a.delProcedure", function (event) {
            event.preventDefault();
            $.ajax({
                method: "GET",
                url: '@Url.Action("DelProcedure", "Invoices")',
                data: {
                    _ProcID: $(this).attr("data-procId")},
                contentType: "html",
                error: function () {
                    //$("#CityID").empty();
                },
                beforeSend: function () {
                    //$("#OrderOverlay").show()
                },
                success: function (response) {
                    $("#procTable").empty();
                    $("#procTable").html(response);
                },
                complete: function () {
                    $("#ProcName").val(''), $("#Units").val(''), $("#Discount").val('')
                    bind()
                }
            })
        });

        $(document).on("submit", "form", function (event) {

            event.preventDefault();

            var formValues = $(this).serialize();
            url = $("form").attr('action');
            var formPost = $.post(url, formValues);
            formPost.done(function (data) {
                if (data == '1') {
                    Swal.fire({
                        icon: 'success',
                        title: 'Saved',
                        text: 'Invoice Created'
                    }).then((result) => {
                        /* Read more about isConfirmed, isDenied below */
                        if (result.value == true) {
                            location.href = '@Url.Action("Index", "Invoices")';
                        }
                    });
                }
                else if (data == '0') {
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: 'An error occurred'
                    });
                }
                else {
                    swal.fire({
                        icon: 'warning',
                        title: 'Validation Error',
                        text: data
                    })
                }
            });
        });
    });

</script>
<script type="text/javascript">
    function change() {
        var maxvar = parseFloat(document.getElementById('SumAmount').innerText)
        if (parseFloat(document.getElementById('DiscountAmount').value) > parseFloat(maxvar)) { document.getElementById('DiscountAmount').value = maxvar; }

        if (maxvar > 0) {
            var n = parseFloat(parseFloat(parseFloat(document.getElementById('DiscountAmount').value) / maxvar) * 100)
            document.getElementById('DiscountPercentage').value = parseFloat(n).toFixed(2)
        }
        if (document.getElementById('DiscountAmount').value > 0) {

            document.getElementById('Total_Billed_Amount').value = parseFloat(document.getElementById('bottom_TotalAmount').value) - parseFloat(document.getElementById('DiscountAmount').value)
        }
    }
</script>
<script>
    function bind() {
        document.getElementById('bottom_TotalAmount').value = parseFloat(document.getElementById('SumAmount').innerText)
        document.getElementById('Total_Billed_Amount').value = parseFloat(document.getElementById('SumAmount').innerText) - document.getElementById('DiscountAmount').value
        change()
    }

</script>